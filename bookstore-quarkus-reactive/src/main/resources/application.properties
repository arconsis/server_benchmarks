quarkus.http.port:3000
# As we will expose the same API for Quarkus and SpringBoot AWS LB needs a prefix to route to the correct service
%prod.quarkus.http.root-path=/quarkus
# Database
pg.username=${DB_USER:postgres}
pg.password=${DB_PASSWORD:secret}
pg.host=${DB_HOST:localhost}
pg.port=${DB_PORT:5432}
pg.db=${DB_NAME:books-db}
pg.ssl.mode=${DB_SSL_MODE:allow}
pg.url=postgresql://${pg.host}:${pg.port}/${pg.db}
quarkus.datasource.db-kind=postgresql
quarkus.datasource.jdbc=false
quarkus.datasource.username=${pg.username}
quarkus.datasource.password=${pg.password}
quarkus.datasource.reactive.max-size=20
quarkus.datasource.reactive.url=${pg.url}
quarkus.datasource.reactive.postgresql.ssl-mode=${pg.ssl.mode}
quarkus.datasource.reactive.reconnect-attempts=3
%dev.quarkus.hibernate-orm.log.sql=true
## Database Migrations
quarkus.flyway.migrate-at-start=false
quarkus.flyway.clean-at-start=false
quarkus.flyway.baseline-on-migrate=true
#
# Kubernetes Deployment Config
quarkus.kubernetes.resources.requests.memory=64Mi
quarkus.kubernetes.resources.requests.cpu=50m
quarkus.kubernetes.resources.limits.memory=512Mi
quarkus.kubernetes.resources.limits.cpu=1000m
quarkus.kubernetes.ingress.expose=true
quarkus.kubernetes.ingress.host=${quarkus.application.name}.benchmarks.k8s.dev.arconsis.com
quarkus.kubernetes.ingress.tls.bookstore-quarkus-reactive-tls.enabled=true
quarkus.kubernetes.ingress.tls.bookstore-quarkus-reactive-tls.hosts=${quarkus.kubernetes.ingress.host}
quarkus.kubernetes.ingress.annotations."cert-manager.io/cluster-issuer"=letsencrypt-prod
quarkus.kubernetes.ingress.annotations."kubernetes.io/tls-acme"=true
quarkus.kubernetes.env.mapping.DB_PASSWORD.from-secret=${quarkus.application.name}-postgresql
quarkus.kubernetes.env.mapping.DB_PASSWORD.with-key=postgres-password
quarkus.kubernetes.env.vars.DB_HOST=${quarkus.application.name}-postgresql
